
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080ce4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20000434  00081118  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004c0  000811a4  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c0  000815a4  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007929  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001578  00000000  00000000  00027ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000014e4  00000000  00000000  00029357  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000278  00000000  00000000  0002a83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  0002aab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000135b3  00000000  00000000  0002ac9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005885  00000000  00000000  0003e24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055653  00000000  00000000  00043ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000069c  00000000  00000000  00099128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c0 08 00 20 0d 03 08 00 09 03 08 00 09 03 08 00     ... ............
   80010:	09 03 08 00 09 03 08 00 09 03 08 00 00 00 00 00     ................
	...
   8002c:	09 03 08 00 09 03 08 00 00 00 00 00 09 03 08 00     ................
   8003c:	e9 02 08 00 09 03 08 00 09 03 08 00 09 03 08 00     ................
   8004c:	09 03 08 00 09 03 08 00 09 03 08 00 09 03 08 00     ................
   8005c:	09 03 08 00 59 0a 08 00 09 03 08 00 00 00 00 00     ....Y...........
   8006c:	09 03 08 00 09 03 08 00 09 03 08 00 09 03 08 00     ................
	...
   80084:	09 03 08 00 09 03 08 00 09 03 08 00 09 03 08 00     ................
   80094:	09 03 08 00 09 03 08 00 09 03 08 00 09 03 08 00     ................
   800a4:	00 00 00 00 09 03 08 00 09 03 08 00 09 03 08 00     ................
   800b4:	09 03 08 00 09 03 08 00 09 03 08 00 09 03 08 00     ................
   800c4:	09 03 08 00 09 03 08 00 09 03 08 00 09 03 08 00     ................
   800d4:	09 03 08 00 09 03 08 00 09 03 08 00 09 03 08 00     ................
   800e4:	09 03 08 00 09 03 08 00 61 06 08 00 09 03 08 00     ........a.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080ce4 	.word	0x00080ce4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080ce4 	.word	0x00080ce4
   80154:	20000438 	.word	0x20000438
   80158:	00080ce4 	.word	0x00080ce4
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 */ 

#include "adc.h"

void adc_init(){
	ADC->ADC_CR = 1;
   80160:	4a0c      	ldr	r2, [pc, #48]	; (80194 <adc_init+0x34>)
   80162:	2301      	movs	r3, #1
   80164:	6013      	str	r3, [r2, #0]
	

	ADC->ADC_MR = (1 <<7);
   80166:	2380      	movs	r3, #128	; 0x80
   80168:	6053      	str	r3, [r2, #4]
	
	
	PMC->PMC_PCR |= (1<< 28) |(0 << 16) |  (0 << 17) | (p_id);
   8016a:	490b      	ldr	r1, [pc, #44]	; (80198 <adc_init+0x38>)
   8016c:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
   80170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   80174:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   80178:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (p_id-32);
   8017c:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
   80180:	f043 0320 	orr.w	r3, r3, #32
   80184:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
	
	ADC->ADC_CHER = (1 << 2); // Using channel 2. This corresponds to PA4 which is A5 on th shield
   80188:	2304      	movs	r3, #4
   8018a:	6113      	str	r3, [r2, #16]
	
	ADC->ADC_CR = (1 << 1);
   8018c:	2302      	movs	r3, #2
   8018e:	6013      	str	r3, [r2, #0]
   80190:	4770      	bx	lr
   80192:	bf00      	nop
   80194:	400c0000 	.word	0x400c0000
   80198:	400e0600 	.word	0x400e0600

0008019c <set_dir_RtoL>:
	uint8_t calibrated = (uint8_t) ((from_encoder_casted*255)/1404); //Denne var 1404 endret til 311 da dette plutselig var maks
	return calibrated; 
}

void set_dir_RtoL(){
	PIOD->PIO_SODR |= (1 << 10); 
   8019c:	4a02      	ldr	r2, [pc, #8]	; (801a8 <set_dir_RtoL+0xc>)
   8019e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   801a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   801a4:	6313      	str	r3, [r2, #48]	; 0x30
   801a6:	4770      	bx	lr
   801a8:	400e1400 	.word	0x400e1400

000801ac <set_dir_LtoR>:
}

void set_dir_LtoR(){
	PIOD->PIO_CODR |= (1 << 10);
   801ac:	4a02      	ldr	r2, [pc, #8]	; (801b8 <set_dir_LtoR+0xc>)
   801ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
   801b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   801b4:	6353      	str	r3, [r2, #52]	; 0x34
   801b6:	4770      	bx	lr
   801b8:	400e1400 	.word	0x400e1400

000801bc <motor_init>:
void motor_init() { //ikke vår egen kode
   801bc:	b508      	push	{r3, lr}
	dac_init();
   801be:	4b11      	ldr	r3, [pc, #68]	; (80204 <motor_init+0x48>)
   801c0:	4798      	blx	r3
	PIOD->PIO_PER |= DIR | EN | SEL | NOT_RST | NOT_OE;
   801c2:	4b11      	ldr	r3, [pc, #68]	; (80208 <motor_init+0x4c>)
   801c4:	6819      	ldr	r1, [r3, #0]
   801c6:	f240 6007 	movw	r0, #1543	; 0x607
   801ca:	4301      	orrs	r1, r0
   801cc:	6019      	str	r1, [r3, #0]
	PIOD->PIO_OER |= DIR | EN | SEL | NOT_RST | NOT_OE;
   801ce:	691a      	ldr	r2, [r3, #16]
   801d0:	4302      	orrs	r2, r0
   801d2:	611a      	str	r2, [r3, #16]
	PIOC->PIO_PER |= ENCODER_DATA_MASK;
   801d4:	4a0d      	ldr	r2, [pc, #52]	; (8020c <motor_init+0x50>)
   801d6:	6811      	ldr	r1, [r2, #0]
   801d8:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   801dc:	6011      	str	r1, [r2, #0]
	PIOC->PIO_ODR |= ENCODER_DATA_MASK;
   801de:	6951      	ldr	r1, [r2, #20]
   801e0:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   801e4:	6151      	str	r1, [r2, #20]
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_PIOC << PMC_PCR_PID_Pos);
   801e6:	f5a2 6240 	sub.w	r2, r2, #3072	; 0xc00
   801ea:	4909      	ldr	r1, [pc, #36]	; (80210 <motor_init+0x54>)
   801ec:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	PMC->PMC_PCER0 |= 1 << (ID_PIOC);
   801f0:	6911      	ldr	r1, [r2, #16]
   801f2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   801f6:	6111      	str	r1, [r2, #16]
	PIOD->PIO_SODR = EN; //OLES KODE - DENNE ER VIKTIG. 
   801f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   801fc:	631a      	str	r2, [r3, #48]	; 0x30
	set_dir_LtoR();  
   801fe:	4b05      	ldr	r3, [pc, #20]	; (80214 <motor_init+0x58>)
   80200:	4798      	blx	r3
   80202:	bd08      	pop	{r3, pc}
   80204:	00080249 	.word	0x00080249
   80208:	400e1400 	.word	0x400e1400
   8020c:	400e1200 	.word	0x400e1200
   80210:	1000000d 	.word	0x1000000d
   80214:	000801ad 	.word	0x000801ad

00080218 <start>:
//Prøver vi å kaste negativ verdi som en uint_8t blir det trøbbel




void start(){
   80218:	b538      	push	{r3, r4, r5, lr}
	motor_init();
   8021a:	4c07      	ldr	r4, [pc, #28]	; (80238 <start+0x20>)
   8021c:	47a0      	blx	r4
	set_dir_RtoL();  
   8021e:	4b07      	ldr	r3, [pc, #28]	; (8023c <start+0x24>)
   80220:	4798      	blx	r3
	dac_transmit(120);
   80222:	2078      	movs	r0, #120	; 0x78
   80224:	4d06      	ldr	r5, [pc, #24]	; (80240 <start+0x28>)
   80226:	47a8      	blx	r5
	_delay_ms(3000);
   80228:	f640 30b8 	movw	r0, #3000	; 0xbb8
   8022c:	4b05      	ldr	r3, [pc, #20]	; (80244 <start+0x2c>)
   8022e:	4798      	blx	r3
	dac_transmit(0);
   80230:	2000      	movs	r0, #0
   80232:	47a8      	blx	r5
	motor_init();
   80234:	47a0      	blx	r4
   80236:	bd38      	pop	{r3, r4, r5, pc}
   80238:	000801bd 	.word	0x000801bd
   8023c:	0008019d 	.word	0x0008019d
   80240:	00080285 	.word	0x00080285
   80244:	000802c9 	.word	0x000802c9

00080248 <dac_init>:

#include "dac.h"


void dac_init(){
	DACC->DACC_CR = DACC_CR_SWRST;
   80248:	490b      	ldr	r1, [pc, #44]	; (80278 <dac_init+0x30>)
   8024a:	2301      	movs	r3, #1
   8024c:	600b      	str	r3, [r1, #0]
	
	PMC->PMC_PCR |= (1<< 28) |(0 << 16) |  (0 << 17) | (periph_id);
   8024e:	4a0b      	ldr	r2, [pc, #44]	; (8027c <dac_init+0x34>)
   80250:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   80254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   80258:	f043 0326 	orr.w	r3, r3, #38	; 0x26
   8025c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (periph_id-32);
   80260:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80268:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	DACC->DACC_MR = DACC_MR_USER_SEL_CHANNEL1 | (1 << 27); //Startuptime på 512 clock cycles
   8026c:	4b04      	ldr	r3, [pc, #16]	; (80280 <dac_init+0x38>)
   8026e:	604b      	str	r3, [r1, #4]
	DACC->DACC_CHER = 2;
   80270:	2302      	movs	r3, #2
   80272:	610b      	str	r3, [r1, #16]
   80274:	4770      	bx	lr
   80276:	bf00      	nop
   80278:	400c8000 	.word	0x400c8000
   8027c:	400e0600 	.word	0x400e0600
   80280:	08010000 	.word	0x08010000

00080284 <dac_transmit>:
}


void dac_transmit(uint8_t data){
	//DACC->DACC_CDR = data; 
 	uint16_t twelve_bit_value = (uint16_t)((data* 4096)/256);
   80284:	0300      	lsls	r0, r0, #12
	// uint16_t twelve_bit_value = (uint16_t)(data << 3);
 
 	DACC->DACC_CDR = twelve_bit_value;
   80286:	f3c0 200f 	ubfx	r0, r0, #8, #16
   8028a:	4b01      	ldr	r3, [pc, #4]	; (80290 <dac_transmit+0xc>)
   8028c:	6218      	str	r0, [r3, #32]
   8028e:	4770      	bx	lr
   80290:	400c8000 	.word	0x400c8000

00080294 <SysTick_init_ms>:
volatile uint32_t wait_ticks = 0;


static void SysTick_init_ms(int period) {
	// set SysTick reload value
	SysTick->LOAD = ((int)((F_CPU/1000000)*period))-1;
   80294:	2354      	movs	r3, #84	; 0x54
   80296:	fb03 f000 	mul.w	r0, r3, r0
   8029a:	3801      	subs	r0, #1
   8029c:	4b08      	ldr	r3, [pc, #32]	; (802c0 <SysTick_init_ms+0x2c>)
   8029e:	6058      	str	r0, [r3, #4]

	// reset SysTick counter value
	SysTick->VAL = 0;
   802a0:	2200      	movs	r2, #0
   802a2:	609a      	str	r2, [r3, #8]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   802a4:	4907      	ldr	r1, [pc, #28]	; (802c4 <SysTick_init_ms+0x30>)
   802a6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23

	// set SysTick interrupt priority
	NVIC_SetPriority(SysTick_IRQn, 0); //highest priority

	// set SysTick timer to MCK, enable interrupt and timer
	SysTick->CTRL  = (1 << SysTick_CTRL_CLKSOURCE_Pos) & SysTick_CTRL_CLKSOURCE_Msk;
   802aa:	2204      	movs	r2, #4
   802ac:	601a      	str	r2, [r3, #0]
	SysTick->CTRL |= (1 << SysTick_CTRL_TICKINT_Pos) & SysTick_CTRL_TICKINT_Msk;
   802ae:	681a      	ldr	r2, [r3, #0]
   802b0:	f042 0202 	orr.w	r2, r2, #2
   802b4:	601a      	str	r2, [r3, #0]
	SysTick->CTRL |= (1 << SysTick_CTRL_ENABLE_Pos) & SysTick_CTRL_ENABLE_Msk;
   802b6:	681a      	ldr	r2, [r3, #0]
   802b8:	f042 0201 	orr.w	r2, r2, #1
   802bc:	601a      	str	r2, [r3, #0]
   802be:	4770      	bx	lr
   802c0:	e000e010 	.word	0xe000e010
   802c4:	e000ed00 	.word	0xe000ed00

000802c8 <_delay_ms>:
}
//tungt inspirert

void _delay_ms(uint16_t ms) {
   802c8:	b508      	push	{r3, lr}
	wait_ticks = ms;
   802ca:	4b05      	ldr	r3, [pc, #20]	; (802e0 <_delay_ms+0x18>)
   802cc:	6018      	str	r0, [r3, #0]
	SysTick_init_ms(1000);
   802ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   802d2:	4b04      	ldr	r3, [pc, #16]	; (802e4 <_delay_ms+0x1c>)
   802d4:	4798      	blx	r3
	while(wait_ticks != 0);
   802d6:	4b02      	ldr	r3, [pc, #8]	; (802e0 <_delay_ms+0x18>)
   802d8:	681b      	ldr	r3, [r3, #0]
   802da:	2b00      	cmp	r3, #0
   802dc:	d1fb      	bne.n	802d6 <_delay_ms+0xe>
}
   802de:	bd08      	pop	{r3, pc}
   802e0:	20000450 	.word	0x20000450
   802e4:	00080295 	.word	0x00080295

000802e8 <SysTick_Handler>:


void SysTick_Handler(void) {
	if(wait_ticks!=0) {
   802e8:	4b05      	ldr	r3, [pc, #20]	; (80300 <SysTick_Handler+0x18>)
   802ea:	681b      	ldr	r3, [r3, #0]
   802ec:	b91b      	cbnz	r3, 802f6 <SysTick_Handler+0xe>
		wait_ticks--;
	}
	else {
		SysTick->CTRL = 0;
   802ee:	2200      	movs	r2, #0
   802f0:	4b04      	ldr	r3, [pc, #16]	; (80304 <SysTick_Handler+0x1c>)
   802f2:	601a      	str	r2, [r3, #0]
   802f4:	4770      	bx	lr
		wait_ticks--;
   802f6:	4a02      	ldr	r2, [pc, #8]	; (80300 <SysTick_Handler+0x18>)
   802f8:	6813      	ldr	r3, [r2, #0]
   802fa:	3b01      	subs	r3, #1
   802fc:	6013      	str	r3, [r2, #0]
   802fe:	4770      	bx	lr
   80300:	20000450 	.word	0x20000450
   80304:	e000e010 	.word	0xe000e010

00080308 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80308:	e7fe      	b.n	80308 <Dummy_Handler>
	...

0008030c <Reset_Handler>:
{
   8030c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8030e:	4b11      	ldr	r3, [pc, #68]	; (80354 <Reset_Handler+0x48>)
   80310:	4a11      	ldr	r2, [pc, #68]	; (80358 <Reset_Handler+0x4c>)
   80312:	429a      	cmp	r2, r3
   80314:	d009      	beq.n	8032a <Reset_Handler+0x1e>
   80316:	4b0f      	ldr	r3, [pc, #60]	; (80354 <Reset_Handler+0x48>)
   80318:	4a0f      	ldr	r2, [pc, #60]	; (80358 <Reset_Handler+0x4c>)
   8031a:	e003      	b.n	80324 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   8031c:	6811      	ldr	r1, [r2, #0]
   8031e:	6019      	str	r1, [r3, #0]
   80320:	3304      	adds	r3, #4
   80322:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80324:	490d      	ldr	r1, [pc, #52]	; (8035c <Reset_Handler+0x50>)
   80326:	428b      	cmp	r3, r1
   80328:	d3f8      	bcc.n	8031c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   8032a:	4b0d      	ldr	r3, [pc, #52]	; (80360 <Reset_Handler+0x54>)
   8032c:	e002      	b.n	80334 <Reset_Handler+0x28>
                *pDest++ = 0;
   8032e:	2200      	movs	r2, #0
   80330:	601a      	str	r2, [r3, #0]
   80332:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80334:	4a0b      	ldr	r2, [pc, #44]	; (80364 <Reset_Handler+0x58>)
   80336:	4293      	cmp	r3, r2
   80338:	d3f9      	bcc.n	8032e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8033a:	4b0b      	ldr	r3, [pc, #44]	; (80368 <Reset_Handler+0x5c>)
   8033c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80344:	4a09      	ldr	r2, [pc, #36]	; (8036c <Reset_Handler+0x60>)
   80346:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80348:	4b09      	ldr	r3, [pc, #36]	; (80370 <Reset_Handler+0x64>)
   8034a:	4798      	blx	r3
        main();
   8034c:	4b09      	ldr	r3, [pc, #36]	; (80374 <Reset_Handler+0x68>)
   8034e:	4798      	blx	r3
   80350:	e7fe      	b.n	80350 <Reset_Handler+0x44>
   80352:	bf00      	nop
   80354:	20000000 	.word	0x20000000
   80358:	00080ce4 	.word	0x00080ce4
   8035c:	20000434 	.word	0x20000434
   80360:	20000434 	.word	0x20000434
   80364:	200004c0 	.word	0x200004c0
   80368:	00080000 	.word	0x00080000
   8036c:	e000ed00 	.word	0xe000ed00
   80370:	00080ac1 	.word	0x00080ac1
   80374:	0008041d 	.word	0x0008041d

00080378 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80378:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8037c:	4a20      	ldr	r2, [pc, #128]	; (80400 <SystemInit+0x88>)
   8037e:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80380:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80384:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80386:	4b1f      	ldr	r3, [pc, #124]	; (80404 <SystemInit+0x8c>)
   80388:	6a1b      	ldr	r3, [r3, #32]
   8038a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8038e:	d107      	bne.n	803a0 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80390:	4a1d      	ldr	r2, [pc, #116]	; (80408 <SystemInit+0x90>)
   80392:	4b1c      	ldr	r3, [pc, #112]	; (80404 <SystemInit+0x8c>)
   80394:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80396:	4b1b      	ldr	r3, [pc, #108]	; (80404 <SystemInit+0x8c>)
   80398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8039a:	f013 0f01 	tst.w	r3, #1
   8039e:	d0fa      	beq.n	80396 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   803a0:	4a1a      	ldr	r2, [pc, #104]	; (8040c <SystemInit+0x94>)
   803a2:	4b18      	ldr	r3, [pc, #96]	; (80404 <SystemInit+0x8c>)
   803a4:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   803a6:	4b17      	ldr	r3, [pc, #92]	; (80404 <SystemInit+0x8c>)
   803a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   803ae:	d0fa      	beq.n	803a6 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   803b0:	4a14      	ldr	r2, [pc, #80]	; (80404 <SystemInit+0x8c>)
   803b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   803b4:	f023 0303 	bic.w	r3, r3, #3
   803b8:	f043 0301 	orr.w	r3, r3, #1
   803bc:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   803be:	4b11      	ldr	r3, [pc, #68]	; (80404 <SystemInit+0x8c>)
   803c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803c2:	f013 0f08 	tst.w	r3, #8
   803c6:	d0fa      	beq.n	803be <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   803c8:	4a11      	ldr	r2, [pc, #68]	; (80410 <SystemInit+0x98>)
   803ca:	4b0e      	ldr	r3, [pc, #56]	; (80404 <SystemInit+0x8c>)
   803cc:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   803ce:	4b0d      	ldr	r3, [pc, #52]	; (80404 <SystemInit+0x8c>)
   803d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803d2:	f013 0f02 	tst.w	r3, #2
   803d6:	d0fa      	beq.n	803ce <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   803d8:	2211      	movs	r2, #17
   803da:	4b0a      	ldr	r3, [pc, #40]	; (80404 <SystemInit+0x8c>)
   803dc:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   803de:	4b09      	ldr	r3, [pc, #36]	; (80404 <SystemInit+0x8c>)
   803e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803e2:	f013 0f08 	tst.w	r3, #8
   803e6:	d0fa      	beq.n	803de <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   803e8:	2212      	movs	r2, #18
   803ea:	4b06      	ldr	r3, [pc, #24]	; (80404 <SystemInit+0x8c>)
   803ec:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   803ee:	4b05      	ldr	r3, [pc, #20]	; (80404 <SystemInit+0x8c>)
   803f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803f2:	f013 0f08 	tst.w	r3, #8
   803f6:	d0fa      	beq.n	803ee <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   803f8:	4a06      	ldr	r2, [pc, #24]	; (80414 <SystemInit+0x9c>)
   803fa:	4b07      	ldr	r3, [pc, #28]	; (80418 <SystemInit+0xa0>)
   803fc:	601a      	str	r2, [r3, #0]
   803fe:	4770      	bx	lr
   80400:	400e0a00 	.word	0x400e0a00
   80404:	400e0600 	.word	0x400e0600
   80408:	00370809 	.word	0x00370809
   8040c:	01370809 	.word	0x01370809
   80410:	200d3f01 	.word	0x200d3f01
   80414:	0501bd00 	.word	0x0501bd00
   80418:	20000000 	.word	0x20000000

0008041c <main>:
#include "dac.h"
#include "pid.h"


int main(void)
{
   8041c:	b500      	push	{lr}
   8041e:	b083      	sub	sp, #12
	/* Initialize the SAM system, UART, CAN, internal ADC on Arduino and PWM. We are currently disabling the watch dog timer entirely for testing purposes. */
	
	SystemInit();
   80420:	4b0c      	ldr	r3, [pc, #48]	; (80454 <main+0x38>)
   80422:	4798      	blx	r3
	configure_uart();  
   80424:	4b0c      	ldr	r3, [pc, #48]	; (80458 <main+0x3c>)
   80426:	4798      	blx	r3
	uint32_t BR = 0x00143156;
	can_init_def_tx_rx_mb(BR); 
   80428:	480c      	ldr	r0, [pc, #48]	; (8045c <main+0x40>)
   8042a:	4b0d      	ldr	r3, [pc, #52]	; (80460 <main+0x44>)
   8042c:	4798      	blx	r3
	adc_init();
   8042e:	4b0d      	ldr	r3, [pc, #52]	; (80464 <main+0x48>)
   80430:	4798      	blx	r3
	pwm();
   80432:	4b0d      	ldr	r3, [pc, #52]	; (80468 <main+0x4c>)
   80434:	4798      	blx	r3
	dac_init();
   80436:	4b0d      	ldr	r3, [pc, #52]	; (8046c <main+0x50>)
   80438:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;  // Disable watchdog timer
   8043a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8043e:	4b0c      	ldr	r3, [pc, #48]	; (80470 <main+0x54>)
   80440:	605a      	str	r2, [r3, #4]
	
	start();  // sets to correct position and initiates motor
   80442:	4b0c      	ldr	r3, [pc, #48]	; (80474 <main+0x58>)
   80444:	4798      	blx	r3
	
	/* Variables to keep track of joystick position and goal-scoring */
	
	volatile uint8_t js_pos[4];
	volatile uint16_t* adc_converted;
	*adc_converted = NULL;
   80446:	2300      	movs	r3, #0
   80448:	801b      	strh	r3, [r3, #0]
	uint8_t message_from_button[8]; 
	
	
	
	//volatile uint16_t integrated_error = 0;
	volatile int integrated_error = 0;
   8044a:	9300      	str	r3, [sp, #0]
// 		_delay_ms(2);
// 		dac_transmit(power);
// 	


 		get_js_pos(js_pos); 
   8044c:	a801      	add	r0, sp, #4
   8044e:	4b0a      	ldr	r3, [pc, #40]	; (80478 <main+0x5c>)
   80450:	4798      	blx	r3
   80452:	e7fb      	b.n	8044c <main+0x30>
   80454:	00080379 	.word	0x00080379
   80458:	000809cd 	.word	0x000809cd
   8045c:	00143156 	.word	0x00143156
   80460:	000805cd 	.word	0x000805cd
   80464:	00080161 	.word	0x00080161
   80468:	0008047d 	.word	0x0008047d
   8046c:	00080249 	.word	0x00080249
   80470:	400e1a50 	.word	0x400e1a50
   80474:	00080219 	.word	0x00080219
   80478:	00080701 	.word	0x00080701

0008047c <pwm>:
	

		
		
		
		PIOC->PIO_PDR |= PIO_PC19B_PWMH5 | PIO_PC18B_PWMH6;
   8047c:	4b17      	ldr	r3, [pc, #92]	; (804dc <pwm+0x60>)
   8047e:	685a      	ldr	r2, [r3, #4]
   80480:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   80484:	605a      	str	r2, [r3, #4]
		PIOC->PIO_ABSR |= PIO_PC19B_PWMH5 | PIO_PC18B_PWMH6;
   80486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80488:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   8048c:	671a      	str	r2, [r3, #112]	; 0x70
		
		PMC->PMC_PCR |= (1<< 28) | (pid);
   8048e:	4a14      	ldr	r2, [pc, #80]	; (804e0 <pwm+0x64>)
   80490:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   80494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   80498:	f043 0324 	orr.w	r3, r3, #36	; 0x24
   8049c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
		PMC->PMC_PCER1 |= 1 << (pid-32);
   804a0:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   804a4:	f043 0310 	orr.w	r3, r3, #16
   804a8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		
		PWM->PWM_CLK = 0; //resetting just in case
   804ac:	4b0d      	ldr	r3, [pc, #52]	; (804e4 <pwm+0x68>)
   804ae:	2200      	movs	r2, #0
   804b0:	601a      	str	r2, [r3, #0]
		PWM->PWM_CLK = (84 << 16) | (84 << 0); //seting divide factor
   804b2:	f04f 1254 	mov.w	r2, #5505108	; 0x540054
   804b6:	601a      	str	r2, [r3, #0]
		PWM->PWM_CLK |= (0 << 8) | (0 << 24); //setting prescalar (?) 
   804b8:	681a      	ldr	r2, [r3, #0]
   804ba:	601a      	str	r2, [r3, #0]
		
		
		PWM->PWM_CH_NUM[5].PWM_CMR = 11; //setting channel 5 to clock A 
   804bc:	220b      	movs	r2, #11
   804be:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		PWM->PWM_CH_NUM[6].PWM_CMR = 12; //setting channel 6 to clock B
   804c2:	220c      	movs	r2, #12
   804c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
		
		PWM->PWM_ENA = PWM_ENA_CHID5 | PWM_ENA_CHID6; // Kopiert
   804c8:	2260      	movs	r2, #96	; 0x60
   804ca:	605a      	str	r2, [r3, #4]
		
		PWM->PWM_CH_NUM[5].PWM_CPRD = 20000; //(period*MCK)/84 
   804cc:	f644 6220 	movw	r2, #20000	; 0x4e20
   804d0:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
		PWM->PWM_CH_NUM[6].PWM_CPRD = 20000; //(period*MCK)/84 
   804d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
   804d8:	4770      	bx	lr
   804da:	bf00      	nop
   804dc:	400e1200 	.word	0x400e1200
   804e0:	400e0600 	.word	0x400e0600
   804e4:	40094000 	.word	0x40094000

000804e8 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   804e8:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   804ea:	1857      	adds	r7, r2, r1
   804ec:	2f08      	cmp	r7, #8
   804ee:	bfd4      	ite	le
   804f0:	2300      	movle	r3, #0
   804f2:	2301      	movgt	r3, #1
   804f4:	2908      	cmp	r1, #8
   804f6:	bf98      	it	ls
   804f8:	2a08      	cmpls	r2, #8
   804fa:	d85c      	bhi.n	805b6 <can_init+0xce>
   804fc:	460d      	mov	r5, r1
   804fe:	2b00      	cmp	r3, #0
   80500:	d159      	bne.n	805b6 <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80502:	4a2e      	ldr	r2, [pc, #184]	; (805bc <can_init+0xd4>)
   80504:	6813      	ldr	r3, [r2, #0]
   80506:	f023 0301 	bic.w	r3, r3, #1
   8050a:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8050c:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8050e:	4b2c      	ldr	r3, [pc, #176]	; (805c0 <can_init+0xd8>)
   80510:	f44f 7440 	mov.w	r4, #768	; 0x300
   80514:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80516:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80518:	f024 0403 	bic.w	r4, r4, #3
   8051c:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   8051e:	2403      	movs	r4, #3
   80520:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80522:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80524:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80528:	4c26      	ldr	r4, [pc, #152]	; (805c4 <can_init+0xdc>)
   8052a:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   8052e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80532:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80536:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   8053a:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   8053c:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8053e:	e019      	b.n	80574 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80540:	481e      	ldr	r0, [pc, #120]	; (805bc <can_init+0xd4>)
   80542:	f101 0310 	add.w	r3, r1, #16
   80546:	015b      	lsls	r3, r3, #5
   80548:	18c2      	adds	r2, r0, r3
   8054a:	2600      	movs	r6, #0
   8054c:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8054e:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   80552:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   80556:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8055a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   8055e:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80560:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   80564:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80568:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8056c:	2301      	movs	r3, #1
   8056e:	408b      	lsls	r3, r1
   80570:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80572:	3101      	adds	r1, #1
   80574:	42b9      	cmp	r1, r7
   80576:	dde3      	ble.n	80540 <can_init+0x58>
   80578:	2300      	movs	r3, #0
   8057a:	e00d      	b.n	80598 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8057c:	490f      	ldr	r1, [pc, #60]	; (805bc <can_init+0xd4>)
   8057e:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80582:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   80586:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8058a:	f103 0210 	add.w	r2, r3, #16
   8058e:	0152      	lsls	r2, r2, #5
   80590:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80594:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80596:	3301      	adds	r3, #1
   80598:	42ab      	cmp	r3, r5
   8059a:	dbef      	blt.n	8057c <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8059c:	4b07      	ldr	r3, [pc, #28]	; (805bc <can_init+0xd4>)
   8059e:	605c      	str	r4, [r3, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   805a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   805a4:	4a08      	ldr	r2, [pc, #32]	; (805c8 <can_init+0xe0>)
   805a6:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   805a8:	681a      	ldr	r2, [r3, #0]
   805aa:	f042 0201 	orr.w	r2, r2, #1
   805ae:	601a      	str	r2, [r3, #0]

	return 0;
   805b0:	2000      	movs	r0, #0
}
   805b2:	bcf0      	pop	{r4, r5, r6, r7}
   805b4:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   805b6:	2001      	movs	r0, #1
   805b8:	e7fb      	b.n	805b2 <can_init+0xca>
   805ba:	bf00      	nop
   805bc:	400b4000 	.word	0x400b4000
   805c0:	400e0e00 	.word	0x400e0e00
   805c4:	1000102b 	.word	0x1000102b
   805c8:	e000e100 	.word	0xe000e100

000805cc <can_init_def_tx_rx_mb>:
{
   805cc:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   805ce:	2202      	movs	r2, #2
   805d0:	2101      	movs	r1, #1
   805d2:	4b01      	ldr	r3, [pc, #4]	; (805d8 <can_init_def_tx_rx_mb+0xc>)
   805d4:	4798      	blx	r3
}
   805d6:	bd08      	pop	{r3, pc}
   805d8:	000804e9 	.word	0x000804e9

000805dc <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   805dc:	014b      	lsls	r3, r1, #5
   805de:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   805e2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   805e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   805ea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   805ee:	d033      	beq.n	80658 <can_receive+0x7c>
{
   805f0:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   805f2:	014b      	lsls	r3, r1, #5
   805f4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   805f8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   805fc:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80600:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80604:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80608:	f3c5 458a 	ubfx	r5, r5, #18, #11
   8060c:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   8060e:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   80612:	f3c5 4503 	ubfx	r5, r5, #16, #4
   80616:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80618:	2300      	movs	r3, #0
   8061a:	e003      	b.n	80624 <can_receive+0x48>
				data_low = data_low >> 8;
				//printf("Du kom hit6, data length er"); 
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   8061c:	18c6      	adds	r6, r0, r3
   8061e:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80620:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   80622:	3301      	adds	r3, #1
   80624:	42ab      	cmp	r3, r5
   80626:	da05      	bge.n	80634 <can_receive+0x58>
			if(i < 4)
   80628:	2b03      	cmp	r3, #3
   8062a:	dcf7      	bgt.n	8061c <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   8062c:	18c6      	adds	r6, r0, r3
   8062e:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   80630:	0a24      	lsrs	r4, r4, #8
   80632:	e7f6      	b.n	80622 <can_receive+0x46>
				//printf("Du kom hit7"); 
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80634:	4b09      	ldr	r3, [pc, #36]	; (8065c <can_receive+0x80>)
   80636:	f101 0210 	add.w	r2, r1, #16
   8063a:	0152      	lsls	r2, r2, #5
   8063c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80640:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80642:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80646:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8064a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8064e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80652:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80654:	bc70      	pop	{r4, r5, r6}
   80656:	4770      	bx	lr
		return 1;
   80658:	2001      	movs	r0, #1
   8065a:	4770      	bx	lr
   8065c:	400b4000 	.word	0x400b4000

00080660 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80660:	b510      	push	{r4, lr}
   80662:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	
	char can_sr = CAN0->CAN_SR; 
   80664:	4b1e      	ldr	r3, [pc, #120]	; (806e0 <CAN0_Handler+0x80>)
   80666:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80668:	f014 0f06 	tst.w	r4, #6
   8066c:	d02a      	beq.n	806c4 <CAN0_Handler+0x64>
	{
		
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8066e:	f014 0f02 	tst.w	r4, #2
   80672:	d10b      	bne.n	8068c <CAN0_Handler+0x2c>
		{
			can_receive(&message, 1);
			printf("there was a mailbox 1 event"); 

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80674:	f014 0f04 	tst.w	r4, #4
   80678:	d010      	beq.n	8069c <CAN0_Handler+0x3c>
		
		{
			can_receive(&message, 2);
   8067a:	2102      	movs	r1, #2
   8067c:	a801      	add	r0, sp, #4
   8067e:	4b19      	ldr	r3, [pc, #100]	; (806e4 <CAN0_Handler+0x84>)
   80680:	4798      	blx	r3
			printf("there was a mailbox 2 event"); 
   80682:	4819      	ldr	r0, [pc, #100]	; (806e8 <CAN0_Handler+0x88>)
   80684:	4b19      	ldr	r3, [pc, #100]	; (806ec <CAN0_Handler+0x8c>)
   80686:	4798      	blx	r3
{
   80688:	2300      	movs	r3, #0
   8068a:	e012      	b.n	806b2 <CAN0_Handler+0x52>
			can_receive(&message, 1);
   8068c:	2101      	movs	r1, #1
   8068e:	a801      	add	r0, sp, #4
   80690:	4b14      	ldr	r3, [pc, #80]	; (806e4 <CAN0_Handler+0x84>)
   80692:	4798      	blx	r3
			printf("there was a mailbox 1 event"); 
   80694:	4816      	ldr	r0, [pc, #88]	; (806f0 <CAN0_Handler+0x90>)
   80696:	4b15      	ldr	r3, [pc, #84]	; (806ec <CAN0_Handler+0x8c>)
   80698:	4798      	blx	r3
   8069a:	e7f5      	b.n	80688 <CAN0_Handler+0x28>
		}
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8069c:	4815      	ldr	r0, [pc, #84]	; (806f4 <CAN0_Handler+0x94>)
   8069e:	4b13      	ldr	r3, [pc, #76]	; (806ec <CAN0_Handler+0x8c>)
   806a0:	4798      	blx	r3
   806a2:	e7f1      	b.n	80688 <CAN0_Handler+0x28>
//		printf("[ ");
		for (int i = 0 ; i< message.data_length; i++)
		{
			
//			printf("%d ,", message.data[i]); 
			js_pos_2[i] = message.data[i];
   806a4:	aa04      	add	r2, sp, #16
   806a6:	441a      	add	r2, r3
   806a8:	f812 1c09 	ldrb.w	r1, [r2, #-9]
   806ac:	4a12      	ldr	r2, [pc, #72]	; (806f8 <CAN0_Handler+0x98>)
   806ae:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i< message.data_length; i++)
   806b0:	3301      	adds	r3, #1
   806b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   806b6:	4293      	cmp	r3, r2
   806b8:	dbf4      	blt.n	806a4 <CAN0_Handler+0x44>
   806ba:	2300      	movs	r3, #0
   806bc:	e000      	b.n	806c0 <CAN0_Handler+0x60>
//		}
		
		
		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   806be:	3301      	adds	r3, #1
   806c0:	4293      	cmp	r3, r2
   806c2:	dbfc      	blt.n	806be <CAN0_Handler+0x5e>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   806c4:	f014 0f01 	tst.w	r4, #1
   806c8:	d002      	beq.n	806d0 <CAN0_Handler+0x70>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   806ca:	2201      	movs	r2, #1
   806cc:	4b04      	ldr	r3, [pc, #16]	; (806e0 <CAN0_Handler+0x80>)
   806ce:	609a      	str	r2, [r3, #8]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   806d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   806d4:	4b09      	ldr	r3, [pc, #36]	; (806fc <CAN0_Handler+0x9c>)
   806d6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   806da:	b004      	add	sp, #16
   806dc:	bd10      	pop	{r4, pc}
   806de:	bf00      	nop
   806e0:	400b4000 	.word	0x400b4000
   806e4:	000805dd 	.word	0x000805dd
   806e8:	00080c4c 	.word	0x00080c4c
   806ec:	000809a9 	.word	0x000809a9
   806f0:	00080c30 	.word	0x00080c30
   806f4:	00080c68 	.word	0x00080c68
   806f8:	20000454 	.word	0x20000454
   806fc:	e000e100 	.word	0xe000e100

00080700 <get_js_pos>:

void get_js_pos(uint8_t* adress){
	for (int i = 0; i < 4; i++)
   80700:	2300      	movs	r3, #0
   80702:	e003      	b.n	8070c <get_js_pos+0xc>
	{
		adress[i] = js_pos_2[i]; 
   80704:	4a03      	ldr	r2, [pc, #12]	; (80714 <get_js_pos+0x14>)
   80706:	5cd2      	ldrb	r2, [r2, r3]
   80708:	54c2      	strb	r2, [r0, r3]
	for (int i = 0; i < 4; i++)
   8070a:	3301      	adds	r3, #1
   8070c:	2b03      	cmp	r3, #3
   8070e:	ddf9      	ble.n	80704 <get_js_pos+0x4>
	}
   80710:	4770      	bx	lr
   80712:	bf00      	nop
   80714:	20000454 	.word	0x20000454

00080718 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80718:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   8071a:	b2c8      	uxtb	r0, r1
   8071c:	4b01      	ldr	r3, [pc, #4]	; (80724 <printchar+0xc>)
   8071e:	4798      	blx	r3
   80720:	bd08      	pop	{r3, pc}
   80722:	bf00      	nop
   80724:	00080a35 	.word	0x00080a35

00080728 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8072c:	4607      	mov	r7, r0
   8072e:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80730:	1e15      	subs	r5, r2, #0
   80732:	dd02      	ble.n	8073a <prints+0x12>
   80734:	460a      	mov	r2, r1
   80736:	2100      	movs	r1, #0
   80738:	e004      	b.n	80744 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   8073a:	f04f 0820 	mov.w	r8, #32
   8073e:	e00e      	b.n	8075e <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80740:	3101      	adds	r1, #1
   80742:	3201      	adds	r2, #1
   80744:	7810      	ldrb	r0, [r2, #0]
   80746:	2800      	cmp	r0, #0
   80748:	d1fa      	bne.n	80740 <prints+0x18>
		if (len >= width) width = 0;
   8074a:	42a9      	cmp	r1, r5
   8074c:	da01      	bge.n	80752 <prints+0x2a>
		else width -= len;
   8074e:	1a6d      	subs	r5, r5, r1
   80750:	e000      	b.n	80754 <prints+0x2c>
		if (len >= width) width = 0;
   80752:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80754:	f013 0f02 	tst.w	r3, #2
   80758:	d106      	bne.n	80768 <prints+0x40>
	register int pc = 0, padchar = ' ';
   8075a:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   8075e:	f013 0401 	ands.w	r4, r3, #1
   80762:	d00a      	beq.n	8077a <prints+0x52>
	register int pc = 0, padchar = ' ';
   80764:	2400      	movs	r4, #0
   80766:	e010      	b.n	8078a <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80768:	f04f 0830 	mov.w	r8, #48	; 0x30
   8076c:	e7f7      	b.n	8075e <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   8076e:	4641      	mov	r1, r8
   80770:	4638      	mov	r0, r7
   80772:	4b0d      	ldr	r3, [pc, #52]	; (807a8 <prints+0x80>)
   80774:	4798      	blx	r3
			++pc;
   80776:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80778:	3d01      	subs	r5, #1
   8077a:	2d00      	cmp	r5, #0
   8077c:	dcf7      	bgt.n	8076e <prints+0x46>
   8077e:	e004      	b.n	8078a <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   80780:	4638      	mov	r0, r7
   80782:	4b09      	ldr	r3, [pc, #36]	; (807a8 <prints+0x80>)
   80784:	4798      	blx	r3
		++pc;
   80786:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80788:	3601      	adds	r6, #1
   8078a:	7831      	ldrb	r1, [r6, #0]
   8078c:	2900      	cmp	r1, #0
   8078e:	d1f7      	bne.n	80780 <prints+0x58>
   80790:	e005      	b.n	8079e <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   80792:	4641      	mov	r1, r8
   80794:	4638      	mov	r0, r7
   80796:	4b04      	ldr	r3, [pc, #16]	; (807a8 <prints+0x80>)
   80798:	4798      	blx	r3
		++pc;
   8079a:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   8079c:	3d01      	subs	r5, #1
   8079e:	2d00      	cmp	r5, #0
   807a0:	dcf7      	bgt.n	80792 <prints+0x6a>
	}

	return pc;
}
   807a2:	4620      	mov	r0, r4
   807a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807a8:	00080719 	.word	0x00080719

000807ac <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   807ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   807ae:	b085      	sub	sp, #20
   807b0:	4607      	mov	r7, r0
   807b2:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   807b4:	b151      	cbz	r1, 807cc <printi+0x20>
   807b6:	461e      	mov	r6, r3
   807b8:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   807ba:	b113      	cbz	r3, 807c2 <printi+0x16>
   807bc:	2a0a      	cmp	r2, #10
   807be:	d012      	beq.n	807e6 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   807c0:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   807c2:	ad04      	add	r5, sp, #16
   807c4:	2300      	movs	r3, #0
   807c6:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   807ca:	e018      	b.n	807fe <printi+0x52>
		print_buf[0] = '0';
   807cc:	2330      	movs	r3, #48	; 0x30
   807ce:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   807d2:	2300      	movs	r3, #0
   807d4:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   807d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   807da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   807dc:	a901      	add	r1, sp, #4
   807de:	4638      	mov	r0, r7
   807e0:	4c1b      	ldr	r4, [pc, #108]	; (80850 <printi+0xa4>)
   807e2:	47a0      	blx	r4
   807e4:	e029      	b.n	8083a <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   807e6:	2900      	cmp	r1, #0
   807e8:	db01      	blt.n	807ee <printi+0x42>
	register int t, neg = 0, pc = 0;
   807ea:	2600      	movs	r6, #0
   807ec:	e7e9      	b.n	807c2 <printi+0x16>
		u = -i;
   807ee:	424c      	negs	r4, r1
		neg = 1;
   807f0:	2601      	movs	r6, #1
   807f2:	e7e6      	b.n	807c2 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   807f4:	3330      	adds	r3, #48	; 0x30
   807f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   807fa:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   807fe:	b14c      	cbz	r4, 80814 <printi+0x68>
		t = u % b;
   80800:	fbb4 f3f2 	udiv	r3, r4, r2
   80804:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80808:	2b09      	cmp	r3, #9
   8080a:	ddf3      	ble.n	807f4 <printi+0x48>
			t += letbase - '0' - 10;
   8080c:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80810:	440b      	add	r3, r1
   80812:	e7ef      	b.n	807f4 <printi+0x48>
	}

	if (neg) {
   80814:	b156      	cbz	r6, 8082c <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80818:	b11b      	cbz	r3, 80822 <printi+0x76>
   8081a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8081c:	f013 0f02 	tst.w	r3, #2
   80820:	d10d      	bne.n	8083e <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80822:	232d      	movs	r3, #45	; 0x2d
   80824:	f805 3c01 	strb.w	r3, [r5, #-1]
   80828:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   8082a:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   8082c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8082e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80830:	4629      	mov	r1, r5
   80832:	4638      	mov	r0, r7
   80834:	4c06      	ldr	r4, [pc, #24]	; (80850 <printi+0xa4>)
   80836:	47a0      	blx	r4
   80838:	4430      	add	r0, r6
}
   8083a:	b005      	add	sp, #20
   8083c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   8083e:	212d      	movs	r1, #45	; 0x2d
   80840:	4638      	mov	r0, r7
   80842:	4b04      	ldr	r3, [pc, #16]	; (80854 <printi+0xa8>)
   80844:	4798      	blx	r3
			--width;
   80846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80848:	3b01      	subs	r3, #1
   8084a:	930a      	str	r3, [sp, #40]	; 0x28
   8084c:	e7ee      	b.n	8082c <printi+0x80>
   8084e:	bf00      	nop
   80850:	00080729 	.word	0x00080729
   80854:	00080719 	.word	0x00080719

00080858 <print>:

static int print( char **out, const char *format, va_list args )
{
   80858:	b5f0      	push	{r4, r5, r6, r7, lr}
   8085a:	b089      	sub	sp, #36	; 0x24
   8085c:	4606      	mov	r6, r0
   8085e:	460c      	mov	r4, r1
   80860:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80862:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80864:	e081      	b.n	8096a <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80866:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80868:	2301      	movs	r3, #1
   8086a:	e08b      	b.n	80984 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   8086c:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   8086e:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80872:	7822      	ldrb	r2, [r4, #0]
   80874:	2a30      	cmp	r2, #48	; 0x30
   80876:	d0f9      	beq.n	8086c <print+0x14>
   80878:	2200      	movs	r2, #0
   8087a:	e006      	b.n	8088a <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   8087c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80880:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80882:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80886:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80888:	3401      	adds	r4, #1
   8088a:	7821      	ldrb	r1, [r4, #0]
   8088c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80890:	b2c0      	uxtb	r0, r0
   80892:	2809      	cmp	r0, #9
   80894:	d9f2      	bls.n	8087c <print+0x24>
			}
			if( *format == 's' ) {
   80896:	2973      	cmp	r1, #115	; 0x73
   80898:	d018      	beq.n	808cc <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   8089a:	2964      	cmp	r1, #100	; 0x64
   8089c:	d022      	beq.n	808e4 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   8089e:	2978      	cmp	r1, #120	; 0x78
   808a0:	d02f      	beq.n	80902 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   808a2:	2958      	cmp	r1, #88	; 0x58
   808a4:	d03c      	beq.n	80920 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   808a6:	2975      	cmp	r1, #117	; 0x75
   808a8:	d049      	beq.n	8093e <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   808aa:	2963      	cmp	r1, #99	; 0x63
   808ac:	d15c      	bne.n	80968 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   808ae:	9905      	ldr	r1, [sp, #20]
   808b0:	1d08      	adds	r0, r1, #4
   808b2:	9005      	str	r0, [sp, #20]
   808b4:	7809      	ldrb	r1, [r1, #0]
   808b6:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   808ba:	2100      	movs	r1, #0
   808bc:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   808c0:	a907      	add	r1, sp, #28
   808c2:	4630      	mov	r0, r6
   808c4:	4f34      	ldr	r7, [pc, #208]	; (80998 <print+0x140>)
   808c6:	47b8      	blx	r7
   808c8:	4405      	add	r5, r0
				continue;
   808ca:	e04d      	b.n	80968 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   808cc:	9905      	ldr	r1, [sp, #20]
   808ce:	1d08      	adds	r0, r1, #4
   808d0:	9005      	str	r0, [sp, #20]
   808d2:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   808d4:	b121      	cbz	r1, 808e0 <print+0x88>
   808d6:	4630      	mov	r0, r6
   808d8:	4f2f      	ldr	r7, [pc, #188]	; (80998 <print+0x140>)
   808da:	47b8      	blx	r7
   808dc:	4405      	add	r5, r0
				continue;
   808de:	e043      	b.n	80968 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   808e0:	492e      	ldr	r1, [pc, #184]	; (8099c <print+0x144>)
   808e2:	e7f8      	b.n	808d6 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   808e4:	9905      	ldr	r1, [sp, #20]
   808e6:	1d08      	adds	r0, r1, #4
   808e8:	9005      	str	r0, [sp, #20]
   808ea:	6809      	ldr	r1, [r1, #0]
   808ec:	2061      	movs	r0, #97	; 0x61
   808ee:	9002      	str	r0, [sp, #8]
   808f0:	9301      	str	r3, [sp, #4]
   808f2:	9200      	str	r2, [sp, #0]
   808f4:	2301      	movs	r3, #1
   808f6:	220a      	movs	r2, #10
   808f8:	4630      	mov	r0, r6
   808fa:	4f29      	ldr	r7, [pc, #164]	; (809a0 <print+0x148>)
   808fc:	47b8      	blx	r7
   808fe:	4405      	add	r5, r0
				continue;
   80900:	e032      	b.n	80968 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80902:	9905      	ldr	r1, [sp, #20]
   80904:	1d08      	adds	r0, r1, #4
   80906:	9005      	str	r0, [sp, #20]
   80908:	6809      	ldr	r1, [r1, #0]
   8090a:	2061      	movs	r0, #97	; 0x61
   8090c:	9002      	str	r0, [sp, #8]
   8090e:	9301      	str	r3, [sp, #4]
   80910:	9200      	str	r2, [sp, #0]
   80912:	2300      	movs	r3, #0
   80914:	2210      	movs	r2, #16
   80916:	4630      	mov	r0, r6
   80918:	4f21      	ldr	r7, [pc, #132]	; (809a0 <print+0x148>)
   8091a:	47b8      	blx	r7
   8091c:	4405      	add	r5, r0
				continue;
   8091e:	e023      	b.n	80968 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80920:	9905      	ldr	r1, [sp, #20]
   80922:	1d08      	adds	r0, r1, #4
   80924:	9005      	str	r0, [sp, #20]
   80926:	6809      	ldr	r1, [r1, #0]
   80928:	2041      	movs	r0, #65	; 0x41
   8092a:	9002      	str	r0, [sp, #8]
   8092c:	9301      	str	r3, [sp, #4]
   8092e:	9200      	str	r2, [sp, #0]
   80930:	2300      	movs	r3, #0
   80932:	2210      	movs	r2, #16
   80934:	4630      	mov	r0, r6
   80936:	4f1a      	ldr	r7, [pc, #104]	; (809a0 <print+0x148>)
   80938:	47b8      	blx	r7
   8093a:	4405      	add	r5, r0
				continue;
   8093c:	e014      	b.n	80968 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8093e:	9905      	ldr	r1, [sp, #20]
   80940:	1d08      	adds	r0, r1, #4
   80942:	9005      	str	r0, [sp, #20]
   80944:	6809      	ldr	r1, [r1, #0]
   80946:	2061      	movs	r0, #97	; 0x61
   80948:	9002      	str	r0, [sp, #8]
   8094a:	9301      	str	r3, [sp, #4]
   8094c:	9200      	str	r2, [sp, #0]
   8094e:	2300      	movs	r3, #0
   80950:	220a      	movs	r2, #10
   80952:	4630      	mov	r0, r6
   80954:	4f12      	ldr	r7, [pc, #72]	; (809a0 <print+0x148>)
   80956:	47b8      	blx	r7
   80958:	4405      	add	r5, r0
				continue;
   8095a:	e005      	b.n	80968 <print+0x110>
			++format;
   8095c:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   8095e:	7821      	ldrb	r1, [r4, #0]
   80960:	4630      	mov	r0, r6
   80962:	4b10      	ldr	r3, [pc, #64]	; (809a4 <print+0x14c>)
   80964:	4798      	blx	r3
			++pc;
   80966:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80968:	3401      	adds	r4, #1
   8096a:	7823      	ldrb	r3, [r4, #0]
   8096c:	b163      	cbz	r3, 80988 <print+0x130>
		if (*format == '%') {
   8096e:	2b25      	cmp	r3, #37	; 0x25
   80970:	d1f5      	bne.n	8095e <print+0x106>
			++format;
   80972:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80974:	7863      	ldrb	r3, [r4, #1]
   80976:	b13b      	cbz	r3, 80988 <print+0x130>
			if (*format == '%') goto out;
   80978:	2b25      	cmp	r3, #37	; 0x25
   8097a:	d0ef      	beq.n	8095c <print+0x104>
			if (*format == '-') {
   8097c:	2b2d      	cmp	r3, #45	; 0x2d
   8097e:	f43f af72 	beq.w	80866 <print+0xe>
			width = pad = 0;
   80982:	2300      	movs	r3, #0
   80984:	4614      	mov	r4, r2
   80986:	e774      	b.n	80872 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80988:	b116      	cbz	r6, 80990 <print+0x138>
   8098a:	6833      	ldr	r3, [r6, #0]
   8098c:	2200      	movs	r2, #0
   8098e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80990:	4628      	mov	r0, r5
   80992:	b009      	add	sp, #36	; 0x24
   80994:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80996:	bf00      	nop
   80998:	00080729 	.word	0x00080729
   8099c:	00080c94 	.word	0x00080c94
   809a0:	000807ad 	.word	0x000807ad
   809a4:	00080719 	.word	0x00080719

000809a8 <printf>:

int printf(const char *format, ...)
{
   809a8:	b40f      	push	{r0, r1, r2, r3}
   809aa:	b500      	push	{lr}
   809ac:	b083      	sub	sp, #12
   809ae:	aa04      	add	r2, sp, #16
   809b0:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   809b4:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   809b6:	2000      	movs	r0, #0
   809b8:	4b03      	ldr	r3, [pc, #12]	; (809c8 <printf+0x20>)
   809ba:	4798      	blx	r3
}
   809bc:	b003      	add	sp, #12
   809be:	f85d eb04 	ldr.w	lr, [sp], #4
   809c2:	b004      	add	sp, #16
   809c4:	4770      	bx	lr
   809c6:	bf00      	nop
   809c8:	00080859 	.word	0x00080859

000809cc <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   809cc:	4b16      	ldr	r3, [pc, #88]	; (80a28 <configure_uart+0x5c>)
   809ce:	2200      	movs	r2, #0
   809d0:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   809d2:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809d4:	4b15      	ldr	r3, [pc, #84]	; (80a2c <configure_uart+0x60>)
   809d6:	f44f 7140 	mov.w	r1, #768	; 0x300
   809da:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809dc:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   809de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   809e0:	6f18      	ldr	r0, [r3, #112]	; 0x70
   809e2:	4002      	ands	r2, r0
   809e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   809e8:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809ea:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   809ec:	f44f 7280 	mov.w	r2, #256	; 0x100
   809f0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   809f4:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   809f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   809fa:	21ac      	movs	r1, #172	; 0xac
   809fc:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR), where MCK = 84 000 000 (frequency of ATSAM, we think)  
   809fe:	f240 2123 	movw	r1, #547	; 0x223
   80a02:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80a08:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80a0a:	f240 2102 	movw	r1, #514	; 0x202
   80a0e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80a12:	f04f 31ff 	mov.w	r1, #4294967295
   80a16:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80a18:	21e1      	movs	r1, #225	; 0xe1
   80a1a:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80a1c:	4904      	ldr	r1, [pc, #16]	; (80a30 <configure_uart+0x64>)
   80a1e:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80a20:	2250      	movs	r2, #80	; 0x50
   80a22:	601a      	str	r2, [r3, #0]
   80a24:	4770      	bx	lr
   80a26:	bf00      	nop
   80a28:	20000458 	.word	0x20000458
   80a2c:	400e0e00 	.word	0x400e0e00
   80a30:	e000e100 	.word	0xe000e100

00080a34 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80a34:	4b07      	ldr	r3, [pc, #28]	; (80a54 <uart_putchar+0x20>)
   80a36:	695b      	ldr	r3, [r3, #20]
   80a38:	f013 0f02 	tst.w	r3, #2
   80a3c:	d008      	beq.n	80a50 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80a3e:	4b05      	ldr	r3, [pc, #20]	; (80a54 <uart_putchar+0x20>)
   80a40:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80a42:	4b04      	ldr	r3, [pc, #16]	; (80a54 <uart_putchar+0x20>)
   80a44:	695b      	ldr	r3, [r3, #20]
   80a46:	f413 7f00 	tst.w	r3, #512	; 0x200
   80a4a:	d0fa      	beq.n	80a42 <uart_putchar+0xe>
	return 0;
   80a4c:	2000      	movs	r0, #0
   80a4e:	4770      	bx	lr
	return 1;
   80a50:	2001      	movs	r0, #1
}
   80a52:	4770      	bx	lr
   80a54:	400e0800 	.word	0x400e0800

00080a58 <UART_Handler>:

void UART_Handler(void)
{
   80a58:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80a5a:	4b15      	ldr	r3, [pc, #84]	; (80ab0 <UART_Handler+0x58>)
   80a5c:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80a5e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80a62:	d003      	beq.n	80a6c <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80a64:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80a68:	4a11      	ldr	r2, [pc, #68]	; (80ab0 <UART_Handler+0x58>)
   80a6a:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80a6c:	f013 0f01 	tst.w	r3, #1
   80a70:	d012      	beq.n	80a98 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80a72:	4810      	ldr	r0, [pc, #64]	; (80ab4 <UART_Handler+0x5c>)
   80a74:	7842      	ldrb	r2, [r0, #1]
   80a76:	1c53      	adds	r3, r2, #1
   80a78:	4259      	negs	r1, r3
   80a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80a7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80a82:	bf58      	it	pl
   80a84:	424b      	negpl	r3, r1
   80a86:	7801      	ldrb	r1, [r0, #0]
   80a88:	428b      	cmp	r3, r1
   80a8a:	d006      	beq.n	80a9a <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80a8c:	4908      	ldr	r1, [pc, #32]	; (80ab0 <UART_Handler+0x58>)
   80a8e:	6988      	ldr	r0, [r1, #24]
   80a90:	4908      	ldr	r1, [pc, #32]	; (80ab4 <UART_Handler+0x5c>)
   80a92:	440a      	add	r2, r1
   80a94:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80a96:	704b      	strb	r3, [r1, #1]
   80a98:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80a9a:	4807      	ldr	r0, [pc, #28]	; (80ab8 <UART_Handler+0x60>)
   80a9c:	4b07      	ldr	r3, [pc, #28]	; (80abc <UART_Handler+0x64>)
   80a9e:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80aa0:	4b04      	ldr	r3, [pc, #16]	; (80ab4 <UART_Handler+0x5c>)
   80aa2:	7859      	ldrb	r1, [r3, #1]
   80aa4:	4a02      	ldr	r2, [pc, #8]	; (80ab0 <UART_Handler+0x58>)
   80aa6:	6992      	ldr	r2, [r2, #24]
   80aa8:	440b      	add	r3, r1
   80aaa:	709a      	strb	r2, [r3, #2]
			return;
   80aac:	bd08      	pop	{r3, pc}
   80aae:	bf00      	nop
   80ab0:	400e0800 	.word	0x400e0800
   80ab4:	20000458 	.word	0x20000458
   80ab8:	00080c9c 	.word	0x00080c9c
   80abc:	000809a9 	.word	0x000809a9

00080ac0 <__libc_init_array>:
   80ac0:	b570      	push	{r4, r5, r6, lr}
   80ac2:	4e0f      	ldr	r6, [pc, #60]	; (80b00 <__libc_init_array+0x40>)
   80ac4:	4d0f      	ldr	r5, [pc, #60]	; (80b04 <__libc_init_array+0x44>)
   80ac6:	1b76      	subs	r6, r6, r5
   80ac8:	10b6      	asrs	r6, r6, #2
   80aca:	bf18      	it	ne
   80acc:	2400      	movne	r4, #0
   80ace:	d005      	beq.n	80adc <__libc_init_array+0x1c>
   80ad0:	3401      	adds	r4, #1
   80ad2:	f855 3b04 	ldr.w	r3, [r5], #4
   80ad6:	4798      	blx	r3
   80ad8:	42a6      	cmp	r6, r4
   80ada:	d1f9      	bne.n	80ad0 <__libc_init_array+0x10>
   80adc:	4e0a      	ldr	r6, [pc, #40]	; (80b08 <__libc_init_array+0x48>)
   80ade:	4d0b      	ldr	r5, [pc, #44]	; (80b0c <__libc_init_array+0x4c>)
   80ae0:	f000 f8ee 	bl	80cc0 <_init>
   80ae4:	1b76      	subs	r6, r6, r5
   80ae6:	10b6      	asrs	r6, r6, #2
   80ae8:	bf18      	it	ne
   80aea:	2400      	movne	r4, #0
   80aec:	d006      	beq.n	80afc <__libc_init_array+0x3c>
   80aee:	3401      	adds	r4, #1
   80af0:	f855 3b04 	ldr.w	r3, [r5], #4
   80af4:	4798      	blx	r3
   80af6:	42a6      	cmp	r6, r4
   80af8:	d1f9      	bne.n	80aee <__libc_init_array+0x2e>
   80afa:	bd70      	pop	{r4, r5, r6, pc}
   80afc:	bd70      	pop	{r4, r5, r6, pc}
   80afe:	bf00      	nop
   80b00:	00080ccc 	.word	0x00080ccc
   80b04:	00080ccc 	.word	0x00080ccc
   80b08:	00080cd4 	.word	0x00080cd4
   80b0c:	00080ccc 	.word	0x00080ccc

00080b10 <register_fini>:
   80b10:	4b02      	ldr	r3, [pc, #8]	; (80b1c <register_fini+0xc>)
   80b12:	b113      	cbz	r3, 80b1a <register_fini+0xa>
   80b14:	4802      	ldr	r0, [pc, #8]	; (80b20 <register_fini+0x10>)
   80b16:	f000 b805 	b.w	80b24 <atexit>
   80b1a:	4770      	bx	lr
   80b1c:	00000000 	.word	0x00000000
   80b20:	00080b31 	.word	0x00080b31

00080b24 <atexit>:
   80b24:	2300      	movs	r3, #0
   80b26:	4601      	mov	r1, r0
   80b28:	461a      	mov	r2, r3
   80b2a:	4618      	mov	r0, r3
   80b2c:	f000 b81e 	b.w	80b6c <__register_exitproc>

00080b30 <__libc_fini_array>:
   80b30:	b538      	push	{r3, r4, r5, lr}
   80b32:	4c0a      	ldr	r4, [pc, #40]	; (80b5c <__libc_fini_array+0x2c>)
   80b34:	4d0a      	ldr	r5, [pc, #40]	; (80b60 <__libc_fini_array+0x30>)
   80b36:	1b64      	subs	r4, r4, r5
   80b38:	10a4      	asrs	r4, r4, #2
   80b3a:	d00a      	beq.n	80b52 <__libc_fini_array+0x22>
   80b3c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80b40:	3b01      	subs	r3, #1
   80b42:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80b46:	3c01      	subs	r4, #1
   80b48:	f855 3904 	ldr.w	r3, [r5], #-4
   80b4c:	4798      	blx	r3
   80b4e:	2c00      	cmp	r4, #0
   80b50:	d1f9      	bne.n	80b46 <__libc_fini_array+0x16>
   80b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80b56:	f000 b8bd 	b.w	80cd4 <_fini>
   80b5a:	bf00      	nop
   80b5c:	00080ce4 	.word	0x00080ce4
   80b60:	00080ce0 	.word	0x00080ce0

00080b64 <__retarget_lock_acquire_recursive>:
   80b64:	4770      	bx	lr
   80b66:	bf00      	nop

00080b68 <__retarget_lock_release_recursive>:
   80b68:	4770      	bx	lr
   80b6a:	bf00      	nop

00080b6c <__register_exitproc>:
   80b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80b70:	4d2c      	ldr	r5, [pc, #176]	; (80c24 <__register_exitproc+0xb8>)
   80b72:	4606      	mov	r6, r0
   80b74:	6828      	ldr	r0, [r5, #0]
   80b76:	4698      	mov	r8, r3
   80b78:	460f      	mov	r7, r1
   80b7a:	4691      	mov	r9, r2
   80b7c:	f7ff fff2 	bl	80b64 <__retarget_lock_acquire_recursive>
   80b80:	4b29      	ldr	r3, [pc, #164]	; (80c28 <__register_exitproc+0xbc>)
   80b82:	681c      	ldr	r4, [r3, #0]
   80b84:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80b88:	2b00      	cmp	r3, #0
   80b8a:	d03e      	beq.n	80c0a <__register_exitproc+0x9e>
   80b8c:	685a      	ldr	r2, [r3, #4]
   80b8e:	2a1f      	cmp	r2, #31
   80b90:	dc1c      	bgt.n	80bcc <__register_exitproc+0x60>
   80b92:	f102 0e01 	add.w	lr, r2, #1
   80b96:	b176      	cbz	r6, 80bb6 <__register_exitproc+0x4a>
   80b98:	2101      	movs	r1, #1
   80b9a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80b9e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80ba2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80ba6:	4091      	lsls	r1, r2
   80ba8:	4308      	orrs	r0, r1
   80baa:	2e02      	cmp	r6, #2
   80bac:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80bb0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80bb4:	d023      	beq.n	80bfe <__register_exitproc+0x92>
   80bb6:	3202      	adds	r2, #2
   80bb8:	f8c3 e004 	str.w	lr, [r3, #4]
   80bbc:	6828      	ldr	r0, [r5, #0]
   80bbe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80bc2:	f7ff ffd1 	bl	80b68 <__retarget_lock_release_recursive>
   80bc6:	2000      	movs	r0, #0
   80bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80bcc:	4b17      	ldr	r3, [pc, #92]	; (80c2c <__register_exitproc+0xc0>)
   80bce:	b30b      	cbz	r3, 80c14 <__register_exitproc+0xa8>
   80bd0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80bd4:	f3af 8000 	nop.w
   80bd8:	4603      	mov	r3, r0
   80bda:	b1d8      	cbz	r0, 80c14 <__register_exitproc+0xa8>
   80bdc:	2000      	movs	r0, #0
   80bde:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80be2:	f04f 0e01 	mov.w	lr, #1
   80be6:	6058      	str	r0, [r3, #4]
   80be8:	6019      	str	r1, [r3, #0]
   80bea:	4602      	mov	r2, r0
   80bec:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80bf0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80bf4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80bf8:	2e00      	cmp	r6, #0
   80bfa:	d0dc      	beq.n	80bb6 <__register_exitproc+0x4a>
   80bfc:	e7cc      	b.n	80b98 <__register_exitproc+0x2c>
   80bfe:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80c02:	4301      	orrs	r1, r0
   80c04:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80c08:	e7d5      	b.n	80bb6 <__register_exitproc+0x4a>
   80c0a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80c0e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80c12:	e7bb      	b.n	80b8c <__register_exitproc+0x20>
   80c14:	6828      	ldr	r0, [r5, #0]
   80c16:	f7ff ffa7 	bl	80b68 <__retarget_lock_release_recursive>
   80c1a:	f04f 30ff 	mov.w	r0, #4294967295
   80c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80c22:	bf00      	nop
   80c24:	20000430 	.word	0x20000430
   80c28:	00080cbc 	.word	0x00080cbc
   80c2c:	00000000 	.word	0x00000000
   80c30:	72656874 	.word	0x72656874
   80c34:	61772065 	.word	0x61772065
   80c38:	20612073 	.word	0x20612073
   80c3c:	6c69616d 	.word	0x6c69616d
   80c40:	20786f62 	.word	0x20786f62
   80c44:	76652031 	.word	0x76652031
   80c48:	00746e65 	.word	0x00746e65
   80c4c:	72656874 	.word	0x72656874
   80c50:	61772065 	.word	0x61772065
   80c54:	20612073 	.word	0x20612073
   80c58:	6c69616d 	.word	0x6c69616d
   80c5c:	20786f62 	.word	0x20786f62
   80c60:	76652032 	.word	0x76652032
   80c64:	00746e65 	.word	0x00746e65
   80c68:	304e4143 	.word	0x304e4143
   80c6c:	73656d20 	.word	0x73656d20
   80c70:	65676173 	.word	0x65676173
   80c74:	72726120 	.word	0x72726120
   80c78:	64657669 	.word	0x64657669
   80c7c:	206e6920 	.word	0x206e6920
   80c80:	2d6e6f6e 	.word	0x2d6e6f6e
   80c84:	64657375 	.word	0x64657375
   80c88:	69616d20 	.word	0x69616d20
   80c8c:	786f626c 	.word	0x786f626c
   80c90:	00000d0a 	.word	0x00000d0a
   80c94:	6c756e28 	.word	0x6c756e28
   80c98:	0000296c 	.word	0x0000296c
   80c9c:	3a525245 	.word	0x3a525245
   80ca0:	52415520 	.word	0x52415520
   80ca4:	58522054 	.word	0x58522054
   80ca8:	66756220 	.word	0x66756220
   80cac:	20726566 	.word	0x20726566
   80cb0:	66207369 	.word	0x66207369
   80cb4:	0a6c6c75 	.word	0x0a6c6c75
   80cb8:	0000000d 	.word	0x0000000d

00080cbc <_global_impure_ptr>:
   80cbc:	20000008                                ... 

00080cc0 <_init>:
   80cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80cc2:	bf00      	nop
   80cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80cc6:	bc08      	pop	{r3}
   80cc8:	469e      	mov	lr, r3
   80cca:	4770      	bx	lr

00080ccc <__init_array_start>:
   80ccc:	00080b11 	.word	0x00080b11

00080cd0 <__frame_dummy_init_array_entry>:
   80cd0:	00080119                                ....

00080cd4 <_fini>:
   80cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80cd6:	bf00      	nop
   80cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80cda:	bc08      	pop	{r3}
   80cdc:	469e      	mov	lr, r3
   80cde:	4770      	bx	lr

00080ce0 <__fini_array_start>:
   80ce0:	000800f5 	.word	0x000800f5
