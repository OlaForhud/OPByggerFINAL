
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000576  0000060a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000576  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  00000610  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001206  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6d  00000000  00000000  000019a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000976  00000000  00000000  0000250f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  00003154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b8  00000000  00000000  00003776  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003f2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e7       	ldi	r30, 0x76	; 118
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 31       	cpi	r26, 0x10	; 16
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 19 01 	call	0x232	; 0x232 <main>
  a6:	0c 94 b9 02 	jmp	0x572	; 0x572 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_config_clock>:
#include "adc.h"


void adc_config_clock() {
	// set PB0 to output PWM timer signal
	DDRB |= 1;
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	87 bb       	out	0x17, r24	; 23

	// set the TCCR0 to CTC mode with (1,0)
	TCCR0 |= (1 << WGM01);
  b4:	83 b7       	in	r24, 0x33	; 51
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << WGM00);
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	83 bf       	out	0x33, r24	; 51
	
	// set PWM toggle on match with internal clock (0,1) with regitster 1 from left
	TCCR0 &= ~(1 << COM01);
  c0:	83 b7       	in	r24, 0x33	; 51
  c2:	8f 7d       	andi	r24, 0xDF	; 223
  c4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM00);
  c6:	83 b7       	in	r24, 0x33	; 51
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	83 bf       	out	0x33, r24	; 51

	// set PWM signal to match with internal clock, no prescale (0,0,1) with register 2,1,0 from left
	TCCR0 &= ~(1 << CS02);
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << CS01);
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS00);
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	83 bf       	out	0x33, r24	; 51

	// frequency set to 0.5 x F_CPU
	OCR0 = 0;
  de:	11 be       	out	0x31, r1	; 49
  e0:	08 95       	ret

000000e2 <oled_write>:
}


static void oled_write(uint8_t cmd){
	volatile char* adress = (char*) 0x1000;
	adress[0] = cmd;
  e2:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xef0>
  e6:	08 95       	ret

000000e8 <oled_init>:
#include "oled.h"


void oled_init()
{
	oled_write(0xae); // display off
  e8:	8e ea       	ldi	r24, 0xAE	; 174
  ea:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xa1); //segment remap
  ee:	81 ea       	ldi	r24, 0xA1	; 161
  f0:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xda); //common pads hardware: alternative
  f4:	8a ed       	ldi	r24, 0xDA	; 218
  f6:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x12);
  fa:	82 e1       	ldi	r24, 0x12	; 18
  fc:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xc8); //common output scan direction:com63~com0
 100:	88 ec       	ldi	r24, 0xC8	; 200
 102:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xa8); //multiplex ration mode:63
 106:	88 ea       	ldi	r24, 0xA8	; 168
 108:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x3f);
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xd5); //display divide ratio/osc. freq. mode
 112:	85 ed       	ldi	r24, 0xD5	; 213
 114:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x80);
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x81); //contrast control
 11e:	81 e8       	ldi	r24, 0x81	; 129
 120:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x50);
 124:	80 e5       	ldi	r24, 0x50	; 80
 126:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xd9); //set pre-charge period
 12a:	89 ed       	ldi	r24, 0xD9	; 217
 12c:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x21);
 130:	81 e2       	ldi	r24, 0x21	; 33
 132:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x20); //Set Memory Addressing Mode
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x02);
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xdb); //VCOM deselect level mode
 142:	8b ed       	ldi	r24, 0xDB	; 219
 144:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x30);
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xad); //master configuration
 14e:	8d ea       	ldi	r24, 0xAD	; 173
 150:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x00);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xa4); //out follows RAM content
 15a:	84 ea       	ldi	r24, 0xA4	; 164
 15c:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xa6); //set normal display
 160:	86 ea       	ldi	r24, 0xA6	; 166
 162:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0xaf); // display on
 166:	8f ea       	ldi	r24, 0xAF	; 175
 168:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
 16c:	08 95       	ret

0000016e <oled_goto_line>:



void oled_goto_line(int line){
	int commando = 0xB0 + line;
	oled_write(commando);
 16e:	80 55       	subi	r24, 0x50	; 80
 170:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
 174:	08 95       	ret

00000176 <oled_goto_column>:
}



void oled_goto_column(int column){
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
	oled_write(column % 16);
 17c:	8f 70       	andi	r24, 0x0F	; 15
 17e:	90 78       	andi	r25, 0x80	; 128
 180:	99 23       	and	r25, r25
 182:	24 f4       	brge	.+8      	; 0x18c <oled_goto_column+0x16>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	80 6f       	ori	r24, 0xF0	; 240
 188:	9f 6f       	ori	r25, 0xFF	; 255
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
	oled_write(0x10 + (column/16));
 190:	ce 01       	movw	r24, r28
 192:	dd 23       	and	r29, r29
 194:	0c f4       	brge	.+2      	; 0x198 <oled_goto_column+0x22>
 196:	0f 96       	adiw	r24, 0x0f	; 15
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24
 19c:	95 95       	asr	r25
 19e:	87 95       	ror	r24
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	80 5f       	subi	r24, 0xF0	; 240
 1aa:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <oled_fill>:

void oled_fill(){
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
	for (int i = 0 ; i < 8 ; i++)
 1bc:	00 e0       	ldi	r16, 0x00	; 0
 1be:	10 e0       	ldi	r17, 0x00	; 0
 1c0:	13 c0       	rjmp	.+38     	; 0x1e8 <oled_fill+0x34>
	{
		oled_goto_line(i);
 1c2:	c8 01       	movw	r24, r16
 1c4:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_goto_line>
		oled_goto_column(0);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 bb 00 	call	0x176	; 0x176 <oled_goto_column>
		for (int j = 0 ; j < 128 ; j++)
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <oled_fill+0x2a>
		{
			oled_write((0xff));
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_write>
void oled_fill(){
	for (int i = 0 ; i < 8 ; i++)
	{
		oled_goto_line(i);
		oled_goto_column(0);
		for (int j = 0 ; j < 128 ; j++)
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	c0 38       	cpi	r28, 0x80	; 128
 1e0:	d1 05       	cpc	r29, r1
 1e2:	cc f3       	brlt	.-14     	; 0x1d6 <oled_fill+0x22>
	oled_write(column % 16);
	oled_write(0x10 + (column/16));
}

void oled_fill(){
	for (int i = 0 ; i < 8 ; i++)
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	08 30       	cpi	r16, 0x08	; 8
 1ea:	11 05       	cpc	r17, r1
 1ec:	54 f3       	brlt	.-44     	; 0x1c2 <oled_fill+0xe>
		for (int j = 0 ; j < 128 ; j++)
		{
			oled_write((0xff));
		}
	}
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <SRAM_init>:
	
}


void SRAM_init(void){
	MCUCR |= (1 << SRE);
 1f8:	85 b7       	in	r24, 0x35	; 53
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
 1fe:	80 b7       	in	r24, 0x30	; 48
 200:	80 62       	ori	r24, 0x20	; 32
 202:	80 bf       	out	0x30, r24	; 48
 204:	08 95       	ret

00000206 <USART_Transmit>:
//
//
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffeggggg*/
	while ( !( UCSR0A & (1<<UDRE0)))
 206:	5d 9b       	sbis	0x0b, 5	; 11
 208:	fe cf       	rjmp	.-4      	; 0x206 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 20a:	8c b9       	out	0x0c, r24	; 12
 20c:	08 95       	ret

0000020e <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0))); 
 20e:	5f 9b       	sbis	0x0b, 7	; 11
 210:	fe cf       	rjmp	.-4      	; 0x20e <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
 212:	8c b1       	in	r24, 0x0c	; 12
}
 214:	08 95       	ret

00000216 <USART_Init>:


void USART_Init( unsigned int ubrr )
{
	/* Setting baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 216:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 218:	89 b9       	out	0x09, r24	; 9
	/* Enable the reciever and transmitter*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 21e:	8e e8       	ldi	r24, 0x8E	; 142
 220:	80 bd       	out	0x20, r24	; 32
 222:	08 95       	ret

00000224 <uart_link_printf>:
	return UDR0;
}


void uart_link_printf() {
	fdevopen(&USART_Transmit, &USART_Receive);
 224:	67 e0       	ldi	r22, 0x07	; 7
 226:	71 e0       	ldi	r23, 0x01	; 1
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 2a 01 	call	0x254	; 0x254 <fdevopen>
 230:	08 95       	ret

00000232 <main>:


int main(void)
{
	// Initialize UART
	USART_Init(UBRR);
 232:	8f e1       	ldi	r24, 0x1F	; 31
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 0b 01 	call	0x216	; 0x216 <USART_Init>
	uart_link_printf();
 23a:	0e 94 12 01 	call	0x224	; 0x224 <uart_link_printf>

	//Initialize SRAM
	SRAM_init(); 
 23e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SRAM_init>
	
	//Initialize ADC clock
	adc_config_clock();
 242:	0e 94 57 00 	call	0xae	; 0xae <adc_config_clock>
	  
	  
// 	int ADC_driver_data[4]; 
// 	multifunction_board_test(ADC_driver_data); 
	
	oled_init();
 246:	0e 94 74 00 	call	0xe8	; 0xe8 <oled_init>
	oled_fill(); 
 24a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <oled_fill>
	
	return 0; 
}
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	08 95       	ret

00000254 <fdevopen>:
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	31 f4       	brne	.+12     	; 0x26c <fdevopen+0x18>
 260:	61 15       	cp	r22, r1
 262:	71 05       	cpc	r23, r1
 264:	19 f4       	brne	.+6      	; 0x26c <fdevopen+0x18>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	3a c0       	rjmp	.+116    	; 0x2e0 <fdevopen+0x8c>
 26c:	8b 01       	movw	r16, r22
 26e:	ec 01       	movw	r28, r24
 270:	6e e0       	ldi	r22, 0x0E	; 14
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 75 01 	call	0x2ea	; 0x2ea <calloc>
 27c:	fc 01       	movw	r30, r24
 27e:	89 2b       	or	r24, r25
 280:	91 f3       	breq	.-28     	; 0x266 <fdevopen+0x12>
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	83 83       	std	Z+3, r24	; 0x03
 286:	01 15       	cp	r16, r1
 288:	11 05       	cpc	r17, r1
 28a:	71 f0       	breq	.+28     	; 0x2a8 <fdevopen+0x54>
 28c:	13 87       	std	Z+11, r17	; 0x0b
 28e:	02 87       	std	Z+10, r16	; 0x0a
 290:	81 e8       	ldi	r24, 0x81	; 129
 292:	83 83       	std	Z+3, r24	; 0x03
 294:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 298:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 29c:	89 2b       	or	r24, r25
 29e:	21 f4       	brne	.+8      	; 0x2a8 <fdevopen+0x54>
 2a0:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 2a4:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 2a8:	20 97       	sbiw	r28, 0x00	; 0
 2aa:	c9 f0       	breq	.+50     	; 0x2de <fdevopen+0x8a>
 2ac:	d1 87       	std	Z+9, r29	; 0x09
 2ae:	c0 87       	std	Z+8, r28	; 0x08
 2b0:	83 81       	ldd	r24, Z+3	; 0x03
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	83 83       	std	Z+3, r24	; 0x03
 2b6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 2ba:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 2be:	89 2b       	or	r24, r25
 2c0:	71 f4       	brne	.+28     	; 0x2de <fdevopen+0x8a>
 2c2:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__data_end+0x3>
 2c6:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__data_end+0x2>
 2ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x4>
 2ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x5>
 2d2:	89 2b       	or	r24, r25
 2d4:	21 f4       	brne	.+8      	; 0x2de <fdevopen+0x8a>
 2d6:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__data_end+0x5>
 2da:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end+0x4>
 2de:	cf 01       	movw	r24, r30
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <calloc>:
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	86 9f       	mul	r24, r22
 2f4:	80 01       	movw	r16, r0
 2f6:	87 9f       	mul	r24, r23
 2f8:	10 0d       	add	r17, r0
 2fa:	96 9f       	mul	r25, r22
 2fc:	10 0d       	add	r17, r0
 2fe:	11 24       	eor	r1, r1
 300:	c8 01       	movw	r24, r16
 302:	0e 94 91 01 	call	0x322	; 0x322 <malloc>
 306:	ec 01       	movw	r28, r24
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	29 f0       	breq	.+10     	; 0x316 <calloc+0x2c>
 30c:	a8 01       	movw	r20, r16
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
 316:	ce 01       	movw	r24, r28
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <malloc>:
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	91 05       	cpc	r25, r1
 32e:	10 f4       	brcc	.+4      	; 0x334 <malloc+0x12>
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__flp>
 338:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__flp+0x1>
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	a0 e0       	ldi	r26, 0x00	; 0
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	30 97       	sbiw	r30, 0x00	; 0
 346:	19 f1       	breq	.+70     	; 0x38e <malloc+0x6c>
 348:	40 81       	ld	r20, Z
 34a:	51 81       	ldd	r21, Z+1	; 0x01
 34c:	02 81       	ldd	r16, Z+2	; 0x02
 34e:	13 81       	ldd	r17, Z+3	; 0x03
 350:	48 17       	cp	r20, r24
 352:	59 07       	cpc	r21, r25
 354:	c8 f0       	brcs	.+50     	; 0x388 <malloc+0x66>
 356:	84 17       	cp	r24, r20
 358:	95 07       	cpc	r25, r21
 35a:	69 f4       	brne	.+26     	; 0x376 <malloc+0x54>
 35c:	10 97       	sbiw	r26, 0x00	; 0
 35e:	31 f0       	breq	.+12     	; 0x36c <malloc+0x4a>
 360:	12 96       	adiw	r26, 0x02	; 2
 362:	0c 93       	st	X, r16
 364:	12 97       	sbiw	r26, 0x02	; 2
 366:	13 96       	adiw	r26, 0x03	; 3
 368:	1c 93       	st	X, r17
 36a:	27 c0       	rjmp	.+78     	; 0x3ba <malloc+0x98>
 36c:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__flp>
 370:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__flp+0x1>
 374:	22 c0       	rjmp	.+68     	; 0x3ba <malloc+0x98>
 376:	21 15       	cp	r18, r1
 378:	31 05       	cpc	r19, r1
 37a:	19 f0       	breq	.+6      	; 0x382 <malloc+0x60>
 37c:	42 17       	cp	r20, r18
 37e:	53 07       	cpc	r21, r19
 380:	18 f4       	brcc	.+6      	; 0x388 <malloc+0x66>
 382:	9a 01       	movw	r18, r20
 384:	bd 01       	movw	r22, r26
 386:	ef 01       	movw	r28, r30
 388:	df 01       	movw	r26, r30
 38a:	f8 01       	movw	r30, r16
 38c:	db cf       	rjmp	.-74     	; 0x344 <malloc+0x22>
 38e:	21 15       	cp	r18, r1
 390:	31 05       	cpc	r19, r1
 392:	f9 f0       	breq	.+62     	; 0x3d2 <malloc+0xb0>
 394:	28 1b       	sub	r18, r24
 396:	39 0b       	sbc	r19, r25
 398:	24 30       	cpi	r18, 0x04	; 4
 39a:	31 05       	cpc	r19, r1
 39c:	80 f4       	brcc	.+32     	; 0x3be <malloc+0x9c>
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	9b 81       	ldd	r25, Y+3	; 0x03
 3a2:	61 15       	cp	r22, r1
 3a4:	71 05       	cpc	r23, r1
 3a6:	21 f0       	breq	.+8      	; 0x3b0 <malloc+0x8e>
 3a8:	fb 01       	movw	r30, r22
 3aa:	93 83       	std	Z+3, r25	; 0x03
 3ac:	82 83       	std	Z+2, r24	; 0x02
 3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <malloc+0x96>
 3b0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__flp+0x1>
 3b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__flp>
 3b8:	fe 01       	movw	r30, r28
 3ba:	32 96       	adiw	r30, 0x02	; 2
 3bc:	44 c0       	rjmp	.+136    	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 3be:	fe 01       	movw	r30, r28
 3c0:	e2 0f       	add	r30, r18
 3c2:	f3 1f       	adc	r31, r19
 3c4:	81 93       	st	Z+, r24
 3c6:	91 93       	st	Z+, r25
 3c8:	22 50       	subi	r18, 0x02	; 2
 3ca:	31 09       	sbc	r19, r1
 3cc:	39 83       	std	Y+1, r19	; 0x01
 3ce:	28 83       	st	Y, r18
 3d0:	3a c0       	rjmp	.+116    	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 3d2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 3d6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 3da:	23 2b       	or	r18, r19
 3dc:	41 f4       	brne	.+16     	; 0x3ee <malloc+0xcc>
 3de:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 3e2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 3e6:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__brkval+0x1>
 3ea:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__brkval>
 3ee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f6:	21 15       	cp	r18, r1
 3f8:	31 05       	cpc	r19, r1
 3fa:	41 f4       	brne	.+16     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 3fc:	2d b7       	in	r18, 0x3d	; 61
 3fe:	3e b7       	in	r19, 0x3e	; 62
 400:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 404:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 408:	24 1b       	sub	r18, r20
 40a:	35 0b       	sbc	r19, r21
 40c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__brkval>
 410:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__brkval+0x1>
 414:	e2 17       	cp	r30, r18
 416:	f3 07       	cpc	r31, r19
 418:	a0 f4       	brcc	.+40     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 41a:	2e 1b       	sub	r18, r30
 41c:	3f 0b       	sbc	r19, r31
 41e:	28 17       	cp	r18, r24
 420:	39 07       	cpc	r19, r25
 422:	78 f0       	brcs	.+30     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 424:	ac 01       	movw	r20, r24
 426:	4e 5f       	subi	r20, 0xFE	; 254
 428:	5f 4f       	sbci	r21, 0xFF	; 255
 42a:	24 17       	cp	r18, r20
 42c:	35 07       	cpc	r19, r21
 42e:	48 f0       	brcs	.+18     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 430:	4e 0f       	add	r20, r30
 432:	5f 1f       	adc	r21, r31
 434:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__brkval+0x1>
 438:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <__brkval>
 43c:	81 93       	st	Z+, r24
 43e:	91 93       	st	Z+, r25
 440:	02 c0       	rjmp	.+4      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 442:	e0 e0       	ldi	r30, 0x00	; 0
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	cf 01       	movw	r24, r30
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	08 95       	ret

00000452 <free>:
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	00 97       	sbiw	r24, 0x00	; 0
 458:	09 f4       	brne	.+2      	; 0x45c <free+0xa>
 45a:	81 c0       	rjmp	.+258    	; 0x55e <__stack+0x5f>
 45c:	fc 01       	movw	r30, r24
 45e:	32 97       	sbiw	r30, 0x02	; 2
 460:	13 82       	std	Z+3, r1	; 0x03
 462:	12 82       	std	Z+2, r1	; 0x02
 464:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__flp>
 468:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__flp+0x1>
 46c:	10 97       	sbiw	r26, 0x00	; 0
 46e:	81 f4       	brne	.+32     	; 0x490 <free+0x3e>
 470:	20 81       	ld	r18, Z
 472:	31 81       	ldd	r19, Z+1	; 0x01
 474:	82 0f       	add	r24, r18
 476:	93 1f       	adc	r25, r19
 478:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 47c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 480:	28 17       	cp	r18, r24
 482:	39 07       	cpc	r19, r25
 484:	51 f5       	brne	.+84     	; 0x4da <free+0x88>
 486:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__brkval+0x1>
 48a:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__brkval>
 48e:	67 c0       	rjmp	.+206    	; 0x55e <__stack+0x5f>
 490:	ed 01       	movw	r28, r26
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	ce 17       	cp	r28, r30
 498:	df 07       	cpc	r29, r31
 49a:	40 f4       	brcc	.+16     	; 0x4ac <free+0x5a>
 49c:	4a 81       	ldd	r20, Y+2	; 0x02
 49e:	5b 81       	ldd	r21, Y+3	; 0x03
 4a0:	9e 01       	movw	r18, r28
 4a2:	41 15       	cp	r20, r1
 4a4:	51 05       	cpc	r21, r1
 4a6:	f1 f0       	breq	.+60     	; 0x4e4 <free+0x92>
 4a8:	ea 01       	movw	r28, r20
 4aa:	f5 cf       	rjmp	.-22     	; 0x496 <free+0x44>
 4ac:	d3 83       	std	Z+3, r29	; 0x03
 4ae:	c2 83       	std	Z+2, r28	; 0x02
 4b0:	40 81       	ld	r20, Z
 4b2:	51 81       	ldd	r21, Z+1	; 0x01
 4b4:	84 0f       	add	r24, r20
 4b6:	95 1f       	adc	r25, r21
 4b8:	c8 17       	cp	r28, r24
 4ba:	d9 07       	cpc	r29, r25
 4bc:	59 f4       	brne	.+22     	; 0x4d4 <free+0x82>
 4be:	88 81       	ld	r24, Y
 4c0:	99 81       	ldd	r25, Y+1	; 0x01
 4c2:	84 0f       	add	r24, r20
 4c4:	95 1f       	adc	r25, r21
 4c6:	02 96       	adiw	r24, 0x02	; 2
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
 4cc:	8a 81       	ldd	r24, Y+2	; 0x02
 4ce:	9b 81       	ldd	r25, Y+3	; 0x03
 4d0:	93 83       	std	Z+3, r25	; 0x03
 4d2:	82 83       	std	Z+2, r24	; 0x02
 4d4:	21 15       	cp	r18, r1
 4d6:	31 05       	cpc	r19, r1
 4d8:	29 f4       	brne	.+10     	; 0x4e4 <free+0x92>
 4da:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__flp+0x1>
 4de:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__flp>
 4e2:	3d c0       	rjmp	.+122    	; 0x55e <__stack+0x5f>
 4e4:	e9 01       	movw	r28, r18
 4e6:	fb 83       	std	Y+3, r31	; 0x03
 4e8:	ea 83       	std	Y+2, r30	; 0x02
 4ea:	49 91       	ld	r20, Y+
 4ec:	59 91       	ld	r21, Y+
 4ee:	c4 0f       	add	r28, r20
 4f0:	d5 1f       	adc	r29, r21
 4f2:	ec 17       	cp	r30, r28
 4f4:	fd 07       	cpc	r31, r29
 4f6:	61 f4       	brne	.+24     	; 0x510 <__stack+0x11>
 4f8:	80 81       	ld	r24, Z
 4fa:	91 81       	ldd	r25, Z+1	; 0x01
 4fc:	84 0f       	add	r24, r20
 4fe:	95 1f       	adc	r25, r21
 500:	02 96       	adiw	r24, 0x02	; 2
 502:	e9 01       	movw	r28, r18
 504:	99 83       	std	Y+1, r25	; 0x01
 506:	88 83       	st	Y, r24
 508:	82 81       	ldd	r24, Z+2	; 0x02
 50a:	93 81       	ldd	r25, Z+3	; 0x03
 50c:	9b 83       	std	Y+3, r25	; 0x03
 50e:	8a 83       	std	Y+2, r24	; 0x02
 510:	e0 e0       	ldi	r30, 0x00	; 0
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	12 96       	adiw	r26, 0x02	; 2
 516:	8d 91       	ld	r24, X+
 518:	9c 91       	ld	r25, X
 51a:	13 97       	sbiw	r26, 0x03	; 3
 51c:	00 97       	sbiw	r24, 0x00	; 0
 51e:	19 f0       	breq	.+6      	; 0x526 <__stack+0x27>
 520:	fd 01       	movw	r30, r26
 522:	dc 01       	movw	r26, r24
 524:	f7 cf       	rjmp	.-18     	; 0x514 <__stack+0x15>
 526:	8d 91       	ld	r24, X+
 528:	9c 91       	ld	r25, X
 52a:	11 97       	sbiw	r26, 0x01	; 1
 52c:	9d 01       	movw	r18, r26
 52e:	2e 5f       	subi	r18, 0xFE	; 254
 530:	3f 4f       	sbci	r19, 0xFF	; 255
 532:	82 0f       	add	r24, r18
 534:	93 1f       	adc	r25, r19
 536:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 53a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 53e:	28 17       	cp	r18, r24
 540:	39 07       	cpc	r19, r25
 542:	69 f4       	brne	.+26     	; 0x55e <__stack+0x5f>
 544:	30 97       	sbiw	r30, 0x00	; 0
 546:	29 f4       	brne	.+10     	; 0x552 <__stack+0x53>
 548:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp+0x1>
 54c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__flp>
 550:	02 c0       	rjmp	.+4      	; 0x556 <__stack+0x57>
 552:	13 82       	std	Z+3, r1	; 0x03
 554:	12 82       	std	Z+2, r1	; 0x02
 556:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__brkval+0x1>
 55a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__brkval>
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <memset>:
 564:	dc 01       	movw	r26, r24
 566:	01 c0       	rjmp	.+2      	; 0x56a <memset+0x6>
 568:	6d 93       	st	X+, r22
 56a:	41 50       	subi	r20, 0x01	; 1
 56c:	50 40       	sbci	r21, 0x00	; 0
 56e:	e0 f7       	brcc	.-8      	; 0x568 <memset+0x4>
 570:	08 95       	ret

00000572 <_exit>:
 572:	f8 94       	cli

00000574 <__stop_program>:
 574:	ff cf       	rjmp	.-2      	; 0x574 <__stop_program>
